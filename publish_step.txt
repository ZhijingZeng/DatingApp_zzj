1.client/src search for hard-coded "localhost", and use environment.apiUrl instead
2.angular.json: outPutPath want it to be served by api
"outputPath": "../API/wwwroot"
3.tell api to serve static file as well:
program.cs:see step 3
app.UseDefaultFiles();
app.UseStaticFiles();
4.command line:
Create the production build
into client folder then '$ ng build'
5.change angular budgets angular.json
"budgets": 
                {
                  "type": "initial",
                  "maximumWarning": "1mb",
                  "maximumError": "2mb"
                },
6.since code changes, we need to rebuild     
=>we have our wwwroot folder
=>we can try dotnet run=>server will host the website
=>we can go to https://localhost:5001
7.https://localhost:5001/members when we go to here,since server doesn't 
know about angular rooting, we need to pass this functionality to angular
=>create Fallback controller

8.dealing with fake delay in loading.HttpInterceptor
9.change sqlite to postgresql:
Create a postgres image in docker:
 docker run --name postgres -e POSTGRES_PASSWORD=postgrespw -p 5432:5432 -d postgres:latest
10
nuget gallary download postgres entity EntityFrameworkCore
11 stop application and drop database
12appsetting development.json, change connectionstring
  ApplicationServiceExtensions, change sqlite into UseNpgsql
13 create migration suitable to postgres:
Delete the entire migration folder
Then :$ dotnet ef migrations add PostgresInitial -o Data/Migrations
14 fix syntax error  using dotnet run
(1) program.cs delete connections => 
Seed.cs a new method
=>drop the database again, because we now have a half created database since program.cs failed
(2)seed.json has non-UTC time
in seed.cs
drop database again and dotnet run

15 now that everything is good with the database, we can double check it by creating a new 
connection to the database 


16
using a cloud platform flyio to publish our project
goal:
deploy by docker file
dotnet => docker image => deploy that to flyio 
                       => connect this docker image to a postgres image that they provide
 
 17 docker:
 (1)create a dockerfile under API folder
(2) create a dockerignore file as we don't not need to copy those files since 
it will get from dotnet restore or dotnet publish

18. sign in the docker account and we can build docker image by runing "$ docker build -t zhijingzeng/datingapp ."
19. docker run --rm -it -p 8080:80 zhijingzeng/datingapp:latest
run it and we found we have a problem connecting to the database. but other than that, we are listening to it at port 80

20. production mode in appsetting.js, we need to set it right and rebuild the docker image using  18
21 run again using 19(we would like to replicate when we do the deployment, so we drop the database again)
22 using http://localhost:8080 to see if it works, if so, then we can push it into docker hub.
stop the server. 
23 start a flyio app $ fly launch --image zhijingzeng/dataingapp:latest, and setting the fly.toml [env]
24 dockerfile expose 8080
25fly secrets set TokenKey and CloudinarySettings__APiSecret
26 add connection string provided at runtime by flyio, in program.cs using flyio.txt
# fly.toml app configuration file generated for datingapp-zhijingzeng on 2023-05-05T00:21:33-05:00
#
# See https://fly.io/docs/reference/configuration/ for information about how to use this file.
#

app = "datingapp-zhijingzeng"
primary_region = "ord"


[build]
  image = "zhijingzeng/datingapp:latest"

[env]
  ASPNETCORE_URLS="http://+:8080"
  CloudinarySettings__CloudName="ddgtnwvyx"
  CloudinarySettings__ApiKey="562992654639259"

[http_service]
  internal_port = 8080
  force_https = true
  auto_stop_machines = true
  auto_start_machines = true

